import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, Trash2, Download, Upload } from "lucide-react";
import jsPDF from 'jspdf';
import 'jspdf-autotable';

interface LineItem {
  id: number;
  name: string;
  quantity: number;
  price: number;
  gstRate: number;
}

export default function Invoice() {
  const [customerName, setCustomerName] = useState("");
  const [businessName, setBusinessName] = useState("");
  const [items, setItems] = useState<LineItem[]>([
    { id: 1, name: "", quantity: 1, price: 0, gstRate: 18 },
  ]);
  const [customerLogo, setCustomerLogo] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setCustomerLogo(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const addItem = () => {
    setItems([
      ...items,
      { id: Date.now(), name: "", quantity: 1, price: 0, gstRate: 18 },
    ]);
  };

  const removeItem = (id: number) => {
    setItems(items.filter((item) => item.id !== id));
  };

  const updateItem = (id: number, field: keyof LineItem, value: string | number) => {
    setItems(
      items.map((item) =>
        item.id === id ? { ...item, [field]: value } : item
      )
    );
  };

  const calculateTotals = () => {
    return items.reduce(
      (acc, item) => {
        const subtotal = item.quantity * item.price;
        const gst = subtotal * (item.gstRate / 100);
        return {
          subtotal: acc.subtotal + subtotal,
          gst: acc.gst + gst,
          total: acc.total + subtotal + gst,
        };
      },
      { subtotal: 0, gst: 0, total: 0 }
    );
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const totals = calculateTotals();

    // Add business name and logo
    doc.setFontSize(24);
    doc.text(businessName || 'Business Invoice', 20, 20);

    // Add customer logo if available
    if (customerLogo) {
      doc.addImage(customerLogo, 'JPEG', 140, 20, 30, 30);
    }

    // Add invoice details
    doc.setFontSize(12);
    doc.text(`Customer: ${customerName}`, 20, 40);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50);
    doc.text(`Invoice #: ${Date.now().toString().slice(-8)}`, 20, 60);

    // Add items table
    const tableData = items.map(item => [
      item.name,
      item.quantity,
      `₹${item.price.toFixed(2)}`,
      `${item.gstRate}%`,
      `₹${(item.quantity * item.price).toFixed(2)}`,
      `₹${(item.quantity * item.price * (item.gstRate / 100)).toFixed(2)}`,
      `₹${(item.quantity * item.price * (1 + item.gstRate / 100)).toFixed(2)}`
    ]);

    (doc as any).autoTable({
      startY: 70,
      head: [['Item', 'Qty', 'Price', 'GST Rate', 'Subtotal', 'GST', 'Total']],
      body: tableData,
      theme: 'grid',
      headStyles: { fillColor: [49, 71, 58] },
      styles: { fontSize: 10 }
    });

    // Add totals
    const finalY = (doc as any).lastAutoTable.finalY + 10;
    doc.text(`Subtotal: ₹${totals.subtotal.toFixed(2)}`, 140, finalY);
    doc.text(`GST: ₹${totals.gst.toFixed(2)}`, 140, finalY + 10);
    doc.text(`Total: ₹${totals.total.toFixed(2)}`, 140, finalY + 20);

    // Add Acros stamp
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Acros GST Calculator', 20, doc.internal.pageSize.height - 10);

    // Save the PDF
    doc.save('invoice.pdf');
  };

  const totals = calculateTotals();

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <h1 className="text-4xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/70 dark:from-secondary dark:to-secondary/70">
        Invoice Generator
      </h1>

      <Card className="border-2 border-primary/10 dark:border-secondary/10 shadow-lg transition-all duration-300 hover:shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl flex justify-between items-center">
            <span>Invoice Details</span>
            <div className="flex items-center space-x-4">
              <input
                type="file"
                ref={fileInputRef}
                className="hidden"
                accept="image/*"
                onChange={handleLogoUpload}
              />
              <Button
                variant="outline"
                size="sm"
                onClick={() => fileInputRef.current?.click()}
                className="border-2 border-primary/30 dark:border-secondary/30 hover:bg-primary/10 dark:hover:bg-secondary/10 transition-all duration-300"
              >
                <Upload className="h-4 w-4 mr-2" />
                Upload Logo
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-lg">Business Name</Label>
                <Input
                  value={businessName}
                  onChange={(e) => setBusinessName(e.target.value)}
                  placeholder="Enter business name"
                  className="mt-2 border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                />
              </div>
              <div>
                <Label className="text-lg">Customer Name</Label>
                <Input
                  value={customerName}
                  onChange={(e) => setCustomerName(e.target.value)}
                  placeholder="Enter customer name"
                  className="mt-2 border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                />
              </div>
            </div>

            <div className="space-y-4">
              {items.map((item) => (
                <div key={item.id} className="grid grid-cols-12 gap-4 items-center bg-primary/5 dark:bg-secondary/5 p-4 rounded-lg hover:bg-primary/10 dark:hover:bg-secondary/10 transition-all duration-300">
                  <div className="col-span-4">
                    <Input
                      value={item.name}
                      onChange={(e) => updateItem(item.id, "name", e.target.value)}
                      placeholder="Item name"
                      className="border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                    />
                  </div>
                  <div className="col-span-2">
                    <Input
                      type="number"
                      value={item.quantity}
                      onChange={(e) =>
                        updateItem(item.id, "quantity", parseInt(e.target.value) || 0)
                      }
                      placeholder="Qty"
                      className="border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                    />
                  </div>
                  <div className="col-span-2">
                    <Input
                      type="number"
                      value={item.price}
                      onChange={(e) =>
                        updateItem(item.id, "price", parseFloat(e.target.value) || 0)
                      }
                      placeholder="Price"
                      className="border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                    />
                  </div>
                  <div className="col-span-2">
                    <Input
                      type="number"
                      value={item.gstRate}
                      onChange={(e) =>
                        updateItem(item.id, "gstRate", parseInt(e.target.value) || 0)
                      }
                      placeholder="GST %"
                      className="border-2 focus:border-primary/50 dark:border-secondary/50 dark:focus:border-secondary/50"
                    />
                  </div>
                  <div className="col-span-2 flex justify-end">
                    <Button
                      variant="destructive"
                      size="icon"
                      onClick={() => removeItem(item.id)}
                      disabled={items.length === 1}
                      className="hover:bg-red-600/90 dark:hover:bg-red-600/70 transition-all duration-300"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            <Button 
              onClick={addItem} 
              variant="outline"
              className="w-full border-2 border-primary/30 dark:border-secondary/30 hover:bg-primary/10 dark:hover:bg-secondary/10 transition-all duration-300"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Item
            </Button>

            <div className="mt-8 space-y-2 bg-primary/5 dark:bg-secondary/5 p-4 rounded-lg">
              <div className="flex justify-between text-lg">
                <span>Subtotal:</span>
                <span>₹{totals.subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-lg">
                <span>GST:</span>
                <span>₹{totals.gst.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-xl font-bold">
                <span>Total:</span>
                <span>₹{totals.total.toFixed(2)}</span>
              </div>
            </div>

            <Button 
              onClick={generatePDF} 
              className="w-full bg-primary hover:bg-primary/90 text-white font-semibold py-6 dark:bg-secondary dark:hover:bg-secondary/90 transition-all duration-300 button-glow"
            >
              <Download className="h-5 w-5 mr-2" />
              Download Invoice PDF
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}